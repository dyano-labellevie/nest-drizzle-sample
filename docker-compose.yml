services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: app
    ports:
      - 3000:3000
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - try-network
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      kafka-initializer:
        condition: service_completed_successfully
      mysql:
        condition: service_healthy
    command: npm run start:dev

  consumer:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: consumer
    ports:
      - 3010:3000
    volumes:
      - ./consumer:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - try-network
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      kafka-initializer:
        condition: service_completed_successfully
    command: npm run start:dev

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: false
      KAFKA_CLUSTERS_0_NAME: broker1
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker1:9092
      KAFKA_CLUSTERS_1_NAME: broker2
      KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS: broker2:9093
    networks:
      - try-network
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      kafka-initializer:
        condition: service_completed_successfully

  broker1:
    container_name: broker1
    image: &kafka apache/kafka:3.8.0
    ports:
      - 9092:9092
    volumes:
      - ./docker/broker1:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTNER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://broker1:29092,CONTROLLER://broker1:29093,EXTERNAL://broker1:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker1:29092,EXTERNAL://broker1:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:29093,2@broker2:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSET_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_STORAGE: kafka
      KAFKA_LOG_DIRS: /tmp/kafka/logs
      KAFKA_MIN_INSYNC_REPLICAS: 1
      CLUSTER_ID: kafka-cluster
    networks:
      - try-network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "broker1:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10

  broker2:
    container_name: broker2
    image: apache/kafka:3.8.0
    ports:
      - 9093:9093
    volumes:
      - ./docker/broker2:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTNER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://broker2:29092,CONTROLLER://broker2:29093,EXTERNAL://broker2:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker2:29092,EXTERNAL://broker2:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:29093,2@broker2:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSET_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_DIRS: /tmp/kafka/logs
      KAFKA_OFFSETS_STORAGE: kafka
      KAFKA_MIN_INSYNC_REPLICAS: 1
      CLUSTER_ID: kafka-cluster
    networks:
      - try-network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "broker2:9093", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10

  kafka-initializer:
    container_name: kafka-initializer
    image: *kafka
    working_dir: /opt/kafka/bin
    networks:
      - try-network
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
    command: >
      /bin/bash -c "
      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic __consumer_offsets --replication-factor=2 --partitions=50 --bootstrap-server broker1:9092 &&
      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic added-to-cart --replication-factor=2 --partitions=1 --bootstrap-server broker1:9092 &&
      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic added-to-cart.reply --replication-factor=2 --partitions=50 --bootstrap-server broker1:9092
      "

  mysql:
    platform: linux/x86_64
    image: mysql
    container_name: mysql
    ports:
      - 3306:3306
    volumes:
      - /var/lib/mysql
    networks:
      - try-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: nest_app
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin

networks:
  try-network:
    driver: bridge
    name: try-network
